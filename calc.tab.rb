#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require './calc.rex'
class Calc < Racc::Parser

module_eval(<<'...end calc.racc/module_eval...', 'calc.racc', 18)

...end calc.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     7,     6,     3,    12,     4,     3,     3,     4,     4,     3,
     9,     4,     7,     6,     5,     7 ]

racc_action_check = [
     8,     8,     3,     8,     3,     6,     0,     6,     0,     7,
     5,     7,     2,     2,     1,    10 ]

racc_action_pointer = [
     2,    14,    10,    -2,   nil,    10,     1,     5,    -2,   nil,
    13,   nil,   nil ]

racc_action_default = [
    -6,    -6,    -1,    -6,    -5,    -6,    -6,    -6,    -6,    13,
    -2,    -3,    -4 ]

racc_goto_table = [
     2,     1,   nil,     8,   nil,   nil,    10,    11 ]

racc_goto_check = [
     2,     1,   nil,     2,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 8, :_reduce_none,
  3, 9, :_reduce_2,
  3, 9, :_reduce_3,
  3, 9, :_reduce_4,
  1, 9, :_reduce_none ]

racc_reduce_n = 6

racc_shift_n = 13

racc_token_table = {
  false => 0,
  :error => 1,
  :AST => 2,
  :PLS => 3,
  :L_PAREN => 4,
  :R_PAREN => 5,
  :ID => 6 }

racc_nt_base = 7

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "AST",
  "PLS",
  "L_PAREN",
  "R_PAREN",
  "ID",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'calc.racc', 9)
  def _reduce_2(val, _values)
     "(+ #{val[0]} #{val[2]})" 
  end
.,.,

module_eval(<<'.,.,', 'calc.racc', 10)
  def _reduce_3(val, _values)
     "(* #{val[0]} #{val[2]})" 
  end
.,.,

module_eval(<<'.,.,', 'calc.racc', 11)
  def _reduce_4(val, _values)
     val[1] 
  end
.,.,

# reduce 5 omitted

def _reduce_none(val, _values)
  val[0]
end

end   # class Calc

#c = Calc.new
#begin
#  p c.scan_str('1 + 2 * 3')
#rescue ParseError
#  puts 'parse error'
#end
