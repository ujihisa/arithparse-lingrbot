class Calc
  prechigh
    left AST
    left PLS
  preclow
  options no_result_var
rule
  target  : exp

  exp     : exp PLS exp {
              x_val, x_str, x_memo = val[0]
              y_val, y_str, y_memo = val[2]
              memo = "(+ #{x_val} #{y_val}) => #{x_val + y_val}"
              [x_val + y_val, "(+ #{x_str} #{y_str})", x_memo + y_memo + [memo]]
            }
          | exp AST exp {
              x_val, x_str, x_memo = val[0]
              y_val, y_str, y_memo = val[2]
              memo = "(* #{x_val} #{y_val}) => #{x_val * y_val}"
              [x_val * y_val, "(* #{x_str} #{y_str})", x_memo + y_memo + [memo]]
            }
          | L_PAREN exp R_PAREN { val[1] }
          | ID { [val[0], val[0], []] }
end
---- header ----
require './calc.rex'
---- inner ----
---- footer ----
#c = Calc.new
#begin
#  p c.scan_str('1 + 2 * 3')
#rescue ParseError
#  puts 'parse error'
#end
